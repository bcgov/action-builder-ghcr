name: Conditional Container Builder with Fallback
description: Build if trigger conditions are met, else use fallback image
branding:
  icon: package
  color: blue

inputs:
  ### Required
  package:
    description: Package name; e.g. backend, frontend
    required: true

  ### Typical / recommended
  build_context:
    description: Build context, not required for self-contained package/default directory
  build_file:
    description: Dockerfile with path, not required for self-contained package/default directory
  sbom:
    default: 'true'
    description: Generate a Software Bill of Materials (SBOM) for the container image. Enabled by default for better security practices.
  keep_versions:
    description: Number of versions to keep; omit to skip
  tag_fallback:
    description: Where to pull default images from; e.g. prod, test
  tags:
    default: ${{ github.event.number }}
    description: |
      Default tag(s); e.g. pr#, test, prod.
      Supports multiline input for multiple tags.
      Example: |
        pr123
        demo
        test
  triggers:
    description: Paths used to trigger a build; e.g. ('./backend/' './frontend/)

  ### Usually a bad idea / not recommended
  build_args:
    description: A list of build-time variables, generally not advisable
    value: "BUILDKIT_INLINE_CACHE=1"
  diff_branch:
    description: Branch to diff against
    default: ${{ github.event.repository.default_branch }}
  keep_regex:
    description: Regex for tags to ignore (not delete); defaults to prod, test and semvers
    default: '^(prod|test|(v(\d+)(\.\d+){0,2}.*))$'
  repository:
    description: Non-default repo to clone
    default: ${{ github.repository }}
  tag:
    description: Deprecated input; use tags instead
    deprecationMessage: "Input 'tag' is deprecated and will be removed in a future release. Please use 'tags' instead."
  token:
    description: Specify token (GH or PAT), instead of inheriting one from the calling workflow
    default: ${{ github.token }}

outputs:
  digest:
    description: 'Digest of the built image; e.g. sha256:1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
    value: ${{ steps.build_and_push.outputs.digest }}

  triggered:
    description: Did a deployment trigger?  [true|false]
    value: ${{ steps.diff.outputs.triggered }}

runs:
  using: composite
  steps:
    # Cleanup if inputs.keep_versions provided
    - name: GHCR Cleanup
      if: inputs.keep_versions
      continue-on-error: true # Stop fail if no versions to delete
      uses: actions/delete-package-versions@v5.0.0
      with:
        package-name: "${{ github.event.repository.name }}/${{ inputs.package }}"
        package-type: "container"
        min-versions-to-keep: ${{ inputs.keep_versions }}
        ignore-versions: "${{ inputs.keep_regex }}"

    - id: vars
      shell: bash
      env:
        INPUT_BUILD_CONTEXT: ${{ inputs.build_context }}
        INPUT_BUILD_FILE: ${{ inputs.build_file }}
        INPUT_PACKAGE: ${{ inputs.package }}
      run: |
        # Process inputs and set variables
        set -euo pipefail

        # Early exit for deprecated input
        if [ -n "${{ inputs.tag }}" ]; then
          echo "Input 'tag' is deprecated. Please use 'tags' instead."
          exit 1
        fi

        # Set build context and file with defaults
        build_context="${INPUT_BUILD_CONTEXT:-$INPUT_PACKAGE}"
        build_file="${INPUT_BUILD_FILE:-${build_context}/Dockerfile}"

        # Process tags into comma-separated list of full image paths (concise version)
        mapfile -t tags < <(printf '%s\n' "${{ inputs.tags }}" | tr '[:upper:]' '[:lower:]' | tr -d ' ' | grep -v '^$')
        # make the repository lowercase
        repo_lower=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        # make the package lowercase
        package_lower=$(echo "$INPUT_PACKAGE" | tr '[:upper:]' '[:lower:]')
        tags=("${tags[@]/#/ghcr.io/${repo_lower}/${package_lower}:}")
        tags_csv=$(IFS=, ; echo "${tags[*]}")

        # Output all variables at once, and verify they are set
        for v in build_context build_file tags_csv repo_lower package_lower; do
          if [ -z "${!v}" ]; then
            echo "Error: $v is not set!" >&2
            exit 1
          fi
          echo "$v=${!v}" >> "$GITHUB_OUTPUT"
        done

    # Send triggers to diff action
    - id: diff
      uses: bcgov/action-diff-triggers@0d193029efd26c76aeacaa84aba3328de8198370 # v0.2.0
      with:
        triggers: ${{ inputs.triggers }}
        diff_branch: ${{ inputs.diff_branch }}

    # Check if a build is required (steps.build.outputs.triggered=true|false)
    - name: Check for builds
      env:
        URL_FALLBACK: ghcr.io/${{ steps.vars.outputs.repo_lower }}/${{ steps.vars.outputs.package_lower }}:${{ inputs.tag_fallback }}
      id: build
      shell: bash
      run: |
        # Check for builds
        triggered=true
        if [ "${{ steps.diff.outputs.triggered }}" == "true" ]; then
          echo "Build triggered. Used bcgov/action-diff-triggers."
        elif [ "${{ inputs.repository }}" != "${{ github.repository }}" ]; then
          echo "Build triggered.  Override repository provided."
        elif [ -z "${{ inputs.tag_fallback }}" ]; then
          echo "Build triggered.  No tag_fallback provided."
        elif [[ ! $(docker manifest inspect "${URL_FALLBACK}") ]]; then
          echo "Build triggered.  Fallback tag (tag_fallback) not usable."
        else
          echo "Container build not required"
          triggered=false
        fi
        echo "triggered=$triggered" >> $GITHUB_OUTPUT

    # If a build is not required, reuse a previous image
    - name: Recycle/retag Previous Images
      uses: shrink/actions-docker-registry-tag@f04afd0559f66b288586792eb150f45136a927fa # v4
      if: steps.build.outputs.triggered != 'true'
      with:
        registry: ghcr.io
        repository: ${{ steps.vars.outputs.repo_lower }}/${{ steps.vars.outputs.package_lower }}
        target: ${{ inputs.tag_fallback }}
        tags: |
          ${{ inputs.tags }}

    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}

    - name: Set up Docker Buildx
      if: steps.build.outputs.triggered == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      if: steps.build.outputs.triggered == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.token }} 

    - name: Build and push ${{ inputs.package }} Docker image
      id: build_and_push
      if: steps.build.outputs.triggered == 'true'
      uses: docker/build-push-action@v6
      with:
        context: ${{ steps.vars.outputs.build_context }}
        file: ${{ steps.vars.outputs.build_file }}
        push: true
        tags: ${{ steps.vars.outputs.tags_csv }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: ${{ inputs.build_args }}

    - name: Install Syft
      if: steps.build.outputs.triggered == 'true' && inputs.sbom == 'true'
      shell: bash
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Generate SBOM
      if: steps.build.outputs.triggered == 'true' && inputs.sbom == 'true'
      shell: bash
      run: |
        # Generate SBOM in both cyclonedx and spdx formats
        IMAGE="ghcr.io/${{ steps.vars.outputs.repo_lower }}/${{ steps.vars.outputs.package_lower }}@${{ steps.build_and_push.outputs.digest }}"
        
        # Create SBOMs directory
        mkdir -p sboms
        
        # Generate CycloneDX SBOM
        syft packages "$IMAGE" -o cyclonedx-json > "sboms/${{ inputs.package }}-cyclonedx.json"
        
        # Generate SPDX SBOM
        syft packages "$IMAGE" -o spdx-json > "sboms/${{ inputs.package }}-spdx.json"
        
        # Upload SBOMs as artifacts
        echo "sbom_cyclonedx=sboms/${{ inputs.package }}-cyclonedx.json" >> $GITHUB_OUTPUT
        echo "sbom_spdx=sboms/${{ inputs.package }}-spdx.json" >> $GITHUB_OUTPUT

    - name: Upload SBOMs
      uses: actions/upload-artifact@v4
      if: steps.build.outputs.triggered == 'true' && inputs.sbom == 'true'
      with:
        name: sboms-${{ inputs.package }}
        path: sboms/
        if-no-files-found: error
        
    - name: Attest
      uses: actions/attest@v2.3.0
      if: steps.build.outputs.triggered == 'true'
      continue-on-error: true
      with:
        subject-name: ghcr.io/${{ github.event.repository.name }}/${{ inputs.package }}
        subject-digest: ${{ steps.build_and_push.outputs.digest }}
        predicate-type: 'https://in-toto.io/attestation/release/v0.1'
        predicate: '{"purl":"pkg:oci/${{ github.event.repository.name }}/${{ inputs.package }}"}'

    - name: Prompt user to fix permissions
      if: failure()
      shell: bash
      run: |
        echo "::warning::Attestation skipped due to missing id-token:write and attestations:write permissions. Please update workflow permissions."

    # Action repo needs to be present for cleanup/tests
    - name: Checkout local repo to make sure action.yml is present
      if: github.repository != inputs.repository
      uses: actions/checkout@v4

    - name: Print summary outputs
      shell: bash
      run: |
        echo "---- Build Summary ----"
        echo "digest: ${{ steps.build_and_push.outputs.digest }}"
        echo "triggered: ${{ steps.diff.outputs.triggered }}"
        echo "tags_csv: ${{ steps.vars.outputs.tags_csv }}"
        echo "-----------------------"
